#include <iostream>
#include <fstream>
#include <experimental/filesystem> // para C++17 o posterior
#include <windows.h> // solo para Windows

namespace fs = std::experimental::filesystem;

// Función para crear archivos
void crearArchivos(int numArchivos) {
    // Determinar el subdirectorio y el formato de nombre de archivo en función del número de archivos
    std::string subdirectorio, formatoNombreArchivo;
    if (numArchivos % 2 == 0) {
        subdirectorio = "Mis archivos/par";
        formatoNombreArchivo = "archivo%d.txt";
    }
    else {
        subdirectorio = "Escritorio/impar";
        formatoNombreArchivo = "archivo%d.dat";
    }

    // Crear el subdirectorio si no existe
    fs::create_directories(subdirectorio);

    // Crear los archivos con el formato y el número de líneas especificados
    for (int i = 1; i <= numArchivos; i++) {
        std::string nombreArchivo = subdirectorio + "/" + sprintf(formatoNombreArchivo.c_str(), i);
        std::ofstream archivo(nombreArchivo);
        for (int j = 1; j <= i; j++) {
            archivo << "Línea " << j << std::endl;
        }
        archivo.close();
    }
}

// Función para agregar texto a los archivos creados
void agregarTextoAArchivos() {
    // Iterar sobre todos los archivos en los subdirectorios "par" e "impar"
    for (auto& archivo : fs::recursive_directory_iterator(".")) {
        // Verificar si el archivo es un archivo regular (no un directorio)
        if (fs::is_regular_file(archivo)) {
            // Obtener la extensión del archivo
            std::string extension = archivo.path().extension().string();

            // Verificar si el archivo está en el subdirectorio "par" y tiene la extensión ".txt"
            if (archivo.path().parent_path().filename() == "par" && extension == ".txt") {
                // Abrir el archivo en modo de apendice y agregar una nueva línea de texto
                std::ofstream archivoSalida(archivo.path().string(), std::ios_base::app);
                archivoSalida << "Esta es una línea de texto agregada al archivo " << archivo.path().filename().string() << std::endl;
                archivoSalida.close();
            }
            // Verificar si el archivo está en el subdirectorio "impar" y tiene la extensión ".dat"
            else if (archivo.path().parent_path().filename() == "impar" && extension == ".dat") {
                // Abrir el archivo en modo de apendice y agregar dos nuevas líneas de texto
                std::ofstream archivoSalida(archivo.path().string(), std::ios_base::app);
                archivoSalida << "Esta es una línea de texto agregada al archivo " << archivo.path().filename().string() << std::endl;
                archivoSalida << "Esta es otra línea de texto agregada al archivo " << archivo.path().filename().string() << std::endl;
                archivoSalida.close();
            }
        }
    }
}

// Función para encontrar el archivo más grande
std::string encontrarArchivoMasGrande() {
    // Inicializar el tamaño máximo de archivo a 0 y el nombre de archivo a una cadena vacía
    DWORD tamanoMaximoArchivo = 0;
    std::string nombreArchivoMaximo = "";
